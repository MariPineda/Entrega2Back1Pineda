<head>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>

<div class="container mt-5">
    <h1 class="mb-4">Productos en Tiempo Real</h1>

    <form id="productForm" class="row g-3">
        <input type="text" name="title" class="form-control" placeholder="Título" required />
        <input type="text" name="description" class="form-control" placeholder="Descripción" required />
        <input type="text" name="code" class="form-control" placeholder="Código" required />
        <input type="number" name="price" class="form-control" placeholder="Precio" required />
        <input type="number" name="stock" class="form-control" placeholder="Stock" required />
        <input type="text" name="category" class="form-control" placeholder="Categoría" required />
        <input type="text" name="thumbnails" class="form-control" placeholder="Thumbnails (opcional)" />
        <button type="submit" class="btn btn-primary" id="submitBtn">Agregar Producto</button>
    </form>

    <div id="message" class="mt-3"></div>

    <ul id="productsList" class="list-group mt-4"></ul>
</div>


<script src="/socket.io/socket.io.js"></script>
<script>
    const socket = io();
    const productForm = document.getElementById('productForm'); 
    const productList = document.getElementById('productsList'); 
    const messageDiv = document.getElementById('message');
    const submitBtn = document.getElementById('submitBtn'); 
    const showMessage = (msg, type = 'success') => {
        messageDiv.innerHTML = `<div class="alert alert-${type}">${msg}</div>`;
        setTimeout(() => messageDiv.innerHTML = '', 4000);
    };

    productForm.addEventListener('submit', e => {
        e.preventDefault(); 
        submitBtn.disabled = true;
        const formData = new FormData(productForm);
        const productData = Object.fromEntries(formData.entries());
        productData.price = parseFloat(productData.price);
        productData.stock = parseInt(productData.stock); 
        productData.thumbnails = [productData.thumbnails || ''];
        socket.emit('new-product', productData);
    });   

    socket.on('product-added-success', () => {
        showMessage('✅ Producto agregado exitosamente.', 'success');
        productForm.reset(); 
        submitBtn.disabled = false; 
    });

    socket.on('product-added-error', (err) => {
        showMessage(`❌Error al agregar el producto: ${err}`, 'danger');
        submitBtn.disabled = false;
    });

    socket.on('product-deleted-success', () => {
        showMessage('🗑️Producto eliminado correctamente.', 'success');
    });

    socket.on('product-deleted-error', (err) => {
        showMessage(`❌Error al eliminar el producto: ${err}`, 'danger');
    });

    socket.on('update-products', products => { 
        productList.innerHTML = '';
        products.forEach(p => {
            const li = document.createElement('li'); 
            li.className = 'list-group-item d-flex justify-content-between align-items-center';
            li.innerHTML = `
                <div>
                    <strong>${p.title}</strong> - ${p.description} - $${p.price}
                </div>
                <button class="btn btn-danger btn-sm" data-id="${p.id}">Eliminar</button>
            `;
            productList.appendChild(li);

            li.querySelector('button').addEventListener('click', () => {
                socket.emit('delete-product', p.id);
            });
        });
    });
</script>
